[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "video-processing-platform"
version = "0.1.0"
description = "Enterprise Video Processing Platform with GPU acceleration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Video Processing Platform Team", email = "team@videoprocessing.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Video",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    # Core dependencies
    "pydantic[email]>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # Async and HTTP
    "aiohttp>=3.8.0",
    "aiofiles>=23.0.0",
    "httpx>=0.24.0",
    
    # API Framework
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.11.0",
    "asyncpg>=0.28.0",  # PostgreSQL async driver
    
    # Cache and Queue
    "redis>=4.6.0",
    "celery>=5.3.0",
    
    # Video Processing
    "yt-dlp>=2023.7.6",
    "ffmpeg-python>=0.2.0",
    
    # Monitoring and Logging
    "prometheus-client>=0.17.0",
    "prometheus-fastapi-instrumentator>=6.1.0",
    "structlog>=23.1.0",
    
    # Utilities
    "click>=8.1.0",
    "rich>=13.4.0",
    "tqdm>=4.65.0",
    "psutil>=5.9.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "pyyaml>=6.0",
    
    # Cloud Storage
    "boto3>=1.28.0",
    "minio>=7.1.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.24.0",  # For testing FastAPI
    
    # Code Quality
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pylint>=2.17.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.1.0",
    "mkdocstrings[python]>=0.22.0",
]

production = [
    # Production-specific dependencies
    "gunicorn>=21.2.0",
    "sentry-sdk[fastapi]>=1.29.0",
]

[project.urls]
Homepage = "https://github.com/your-org/video-processing-platform"
Documentation = "https://video-processing-platform.readthedocs.io/"
Repository = "https://github.com/your-org/video-processing-platform.git"
Issues = "https://github.com/your-org/video-processing-platform/issues"

[project.scripts]
video-processor = "src.cli.main:main"

[project.optional-dependencies]

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "yt_dlp.*",
    "ffmpeg.*",
    "celery.*",
    "redis.*",
    "boto3.*",
    "minio.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]