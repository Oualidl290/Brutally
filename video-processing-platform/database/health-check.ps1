#!/usr/bin/env pwsh
# Health Check Script for Video Processing Platform Database
# Windows PowerShell version

Write-Host "Video Processing Platform Database Health Check" -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor Cyan

$allHealthy = $true

# Check Docker services
Write-Host "`nüìä Checking Docker Services..." -ForegroundColor Yellow
try {
    $services = docker-compose -f docker-compose.production-db.yml ps --format json | ConvertFrom-Json
    
    foreach ($service in $services) {
        $status = if ($service.State -eq "running") { "‚úÖ" } else { "‚ùå"; $allHealthy = $false }
        Write-Host "  $status $($service.Name): $($service.State)" -ForegroundColor $(if ($service.State -eq "running") { "Green" } else { "Red" })
    }
} catch {
    Write-Host "  ‚ùå Failed to check Docker services: $($_.Exception.Message)" -ForegroundColor Red
    $allHealthy = $false
}

# Check PostgreSQL Direct Connection
Write-Host "`nüêò Checking PostgreSQL Direct Connection..." -ForegroundColor Yellow
try {
    $result = docker exec video_processing_postgres pg_isready -U video_admin -d video_processing_prod 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "  ‚úÖ PostgreSQL Direct (Port 5432): Ready" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå PostgreSQL Direct (Port 5432): $result" -ForegroundColor Red
        $allHealthy = $false
    }
} catch {
    Write-Host "  ‚ùå PostgreSQL Direct Connection Failed: $($_.Exception.Message)" -ForegroundColor Red
    $allHealthy = $false
}

# Check PgBouncer Connection
Write-Host "`nüîÑ Checking PgBouncer Connection..." -ForegroundColor Yellow
try {
    $result = docker exec video_processing_postgres psql -h video_processing_pgbouncer -p 6432 -U video_admin -d video_processing_prod -c "SELECT 1;" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "  ‚úÖ PgBouncer (Port 6432): Connected" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå PgBouncer (Port 6432): Connection failed" -ForegroundColor Red
        $allHealthy = $false
    }
} catch {
    Write-Host "  ‚ùå PgBouncer Connection Failed: $($_.Exception.Message)" -ForegroundColor Red
    $allHealthy = $false
}

# Check Redis Connection
Write-Host "`nüî¥ Checking Redis Connection..." -ForegroundColor Yellow
try {
    $result = docker exec video_processing_redis redis-cli ping 2>&1
    if ($result -eq "PONG") {
        Write-Host "  ‚úÖ Redis (Port 6379): Connected" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå Redis (Port 6379): $result" -ForegroundColor Red
        $allHealthy = $false
    }
} catch {
    Write-Host "  ‚ùå Redis Connection Failed: $($_.Exception.Message)" -ForegroundColor Red
    $allHealthy = $false
}

# Check Admin Interfaces
Write-Host "`nüåê Checking Admin Interfaces..." -ForegroundColor Yellow

# Check PgAdmin
try {
    $response = Invoke-WebRequest -Uri "http://localhost:5050" -TimeoutSec 5 -UseBasicParsing 2>$null
    if ($response.StatusCode -eq 200) {
        Write-Host "  ‚úÖ PgAdmin (http://localhost:5050): Available" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå PgAdmin (http://localhost:5050): HTTP $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host "  ‚ö†Ô∏è  PgAdmin (http://localhost:5050): Not accessible (may still be starting)" -ForegroundColor Yellow
}

# Check Redis Commander
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8081" -TimeoutSec 5 -UseBasicParsing 2>$null
    if ($response.StatusCode -eq 200) {
        Write-Host "  ‚úÖ Redis Commander (http://localhost:8081): Available" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå Redis Commander (http://localhost:8081): HTTP $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host "  ‚ö†Ô∏è  Redis Commander (http://localhost:8081): Not accessible (may still be starting)" -ForegroundColor Yellow
}

# Check Monitoring Endpoints
Write-Host "`nüìà Checking Monitoring Endpoints..." -ForegroundColor Yellow

# Check PostgreSQL Exporter
try {
    $response = Invoke-WebRequest -Uri "http://localhost:9187/metrics" -TimeoutSec 5 -UseBasicParsing 2>$null
    if ($response.StatusCode -eq 200) {
        Write-Host "  ‚úÖ PostgreSQL Metrics (http://localhost:9187/metrics): Available" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå PostgreSQL Metrics: HTTP $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host "  ‚ö†Ô∏è  PostgreSQL Metrics (http://localhost:9187/metrics): Not accessible" -ForegroundColor Yellow
}

# Check Redis Exporter
try {
    $response = Invoke-WebRequest -Uri "http://localhost:9121/metrics" -TimeoutSec 5 -UseBasicParsing 2>$null
    if ($response.StatusCode -eq 200) {
        Write-Host "  ‚úÖ Redis Metrics (http://localhost:9121/metrics): Available" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå Redis Metrics: HTTP $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host "  ‚ö†Ô∏è  Redis Metrics (http://localhost:9121/metrics): Not accessible" -ForegroundColor Yellow
}

# Summary
Write-Host "`n" + "=" * 60 -ForegroundColor Cyan
if ($allHealthy) {
    Write-Host "üéâ All Core Database Services are Healthy!" -ForegroundColor Green
    Write-Host "`nüìã Connection Information:" -ForegroundColor Cyan
    Write-Host "  ‚Ä¢ PostgreSQL Direct: localhost:5432" -ForegroundColor White
    Write-Host "  ‚Ä¢ PostgreSQL Pooled: localhost:6432 (recommended)" -ForegroundColor White
    Write-Host "  ‚Ä¢ Redis: localhost:6379" -ForegroundColor White
    Write-Host "  ‚Ä¢ PgAdmin: http://localhost:5050" -ForegroundColor White
    Write-Host "  ‚Ä¢ Redis Commander: http://localhost:8081" -ForegroundColor White
    Write-Host "`nüîê Database Credentials:" -ForegroundColor Cyan
    Write-Host "  ‚Ä¢ Username: video_admin" -ForegroundColor White
    Write-Host "  ‚Ä¢ Password: VerySecurePassword123!" -ForegroundColor White
    Write-Host "  ‚Ä¢ Database: video_processing_prod" -ForegroundColor White
    exit 0
} else {
    Write-Host "‚ö†Ô∏è  Some services have issues. Check the details above." -ForegroundColor Red
    exit 1
}